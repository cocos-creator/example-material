{"version":3,"sources":["file:///D:/material-examples/show-material/assets/scripts/tangent-visualizer.ts"],"names":["_decorator","Color","Component","Material","ModelComponent","utils","Vec3","GFXPrimitiveMode","GFXAttributeName","ccclass","property","executeInEditMode","requireComponent","v3_1","v3_2","TangentVisualizer","start","_material","initialize","effectName","defines","USE_VERTEX_COLOR","states","primitive","LINE_LIST","refresh","target","comps","node","getComponents","length","console","warn","position","mesh","readAttribute","ATTR_POSITION","normal","ATTR_NORMAL","tangent","ATTR_TANGENT","bitangent","_generateBitangent","_updateModel","MAGENTA","CYAN","YELLOW","comp","pos","data","color","stride","material","createMesh","positions","Array","fill","map","_","i","ofs","Math","floor","fromArray","scaleAndAdd","scale","toArray","reduce","acc","cur","forEach","c","push","colors","WHITE","primitiveMode","minPos","Infinity","maxPos","slice","vCount","multiplyScalar","cross","val"],"mappings":"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","sourcesContent":["import { _decorator, Color, Component, Material, ModelComponent, utils, Vec3, GFXPrimitiveMode, GFXAttributeName } from 'cc';\r\nconst { ccclass, property, executeInEditMode, requireComponent } = _decorator;\r\n\r\nconst v3_1 = new Vec3();\r\nconst v3_2 = new Vec3();\r\n\r\n@ccclass('TangentVisualizer')\r\n@requireComponent(ModelComponent)\r\n@executeInEditMode\r\nexport class TangentVisualizer extends Component {\r\n\r\n    @property(ModelComponent)\r\n    public target = null;\r\n\r\n    @property\r\n    public scale = 0.1;\r\n\r\n    public _material = new Material();\r\n\r\n    @property\r\n    set apply (val) {\r\n        this.refresh();\r\n    }\r\n    get apply () {\r\n        return false;\r\n    }\r\n\r\n    public start () {\r\n        this._material.initialize({\r\n            effectName: 'builtin-unlit',\r\n            defines: { USE_VERTEX_COLOR: true },\r\n            states: { primitive: GFXPrimitiveMode.LINE_LIST },\r\n        });\r\n        this.refresh();\r\n    }\r\n\r\n    public refresh () {\r\n        if (!this.target) { return; }\r\n        const comps = this.node.getComponents(ModelComponent);\r\n        if (comps.length < 3) { console.warn('three model component on this node is needed'); return; }\r\n        const position: TypedArray = this.target.mesh.readAttribute(0, GFXAttributeName.ATTR_POSITION);\r\n        const normal: TypedArray = this.target.mesh.readAttribute(0, GFXAttributeName.ATTR_NORMAL);\r\n        const tangent: TypedArray = this.target.mesh.readAttribute(0, GFXAttributeName.ATTR_TANGENT);\r\n        const bitangent: TypedArray = this._generateBitangent(normal, tangent);\r\n        this._updateModel(comps[0], position, normal, Color.MAGENTA);\r\n        this._updateModel(comps[1], position, tangent, Color.CYAN, 4);\r\n        this._updateModel(comps[2], position, bitangent, Color.YELLOW);\r\n    }\r\n\r\n    public _updateModel (comp: ModelComponent, pos: TypedArray, data: TypedArray, color: Color, stride = 3) {\r\n        comp.material = this._material;\r\n        comp.mesh = utils.createMesh({\r\n            positions: Array(pos.length / 3 * 2).fill(0).map((_, i) => {\r\n                const ofs = Math.floor(i / 2);\r\n                Vec3.fromArray(v3_1, pos, ofs * 3);\r\n                if (i % 2) { Vec3.scaleAndAdd(v3_1, v3_1, Vec3.fromArray(v3_2, data, ofs * stride), this.scale); }\r\n                return Vec3.toArray([], v3_1);\r\n            }).reduce((acc, cur) => (cur.forEach((c) => acc.push(c)), acc), []),\r\n            colors: Array(pos.length / 3 * 2).fill(0).map((_, i) => {\r\n                return Color.toArray([], i % 2 ? color : Color.WHITE);\r\n            }).reduce((acc, cur) => (cur.forEach((c) => acc.push(c)), acc), []),\r\n            primitiveMode: GFXPrimitiveMode.LINE_LIST,\r\n            minPos: new Vec3(-Infinity, -Infinity, -Infinity),\r\n            maxPos: new Vec3( Infinity,  Infinity,  Infinity),\r\n        });\r\n    }\r\n\r\n    public _generateBitangent (normal: TypedArray, tangent: TypedArray) {\r\n        const bitangent = normal.slice();\r\n        const vCount = normal.length / 3;\r\n        for (let i = 0; i < vCount; i++) {\r\n            Vec3.fromArray(v3_1, normal, i * 3);\r\n            Vec3.fromArray(v3_2, tangent, i * 4);\r\n            Vec3.multiplyScalar(v3_1, Vec3.cross(v3_1, v3_1, v3_2), tangent[i * 4 + 3]);\r\n            Vec3.toArray(bitangent, v3_1, i * 3);\r\n        }\r\n        return bitangent;\r\n    }\r\n}\r\n"]}