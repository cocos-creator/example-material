{"version":3,"sources":["file:///D:/material-examples/show-material/assets/prefabs/pre-filter-envmap/pre-filter-envmap.ts"],"names":["getMipLevel","size","level","_decorator","CameraComponent","Component","director","EffectAsset","gfx","Material","ModelComponent","Node","primitives","Quat","TextureCube","utils","ccclass","property","rotations","fromEuler","readRegions","BufferTextureCopy","texExtent","depth","writeRegions","texSubres","layerCount","enableDebug","PreFilterEnvmap","onLoad","_camera","node","getComponentInChildren","_renderTarget","targetTexture","_material","initialize","effectAsset","effect","states","rasterizerState","cullMode","CullMode","FRONT","depthStencilState","depthTest","depthWrite","modelComp","addComponent","mesh","createMesh","box","width","height","length","material","testNode","testMat","effectName","defines","USE_ALBEDO_MAP","setProperty","getGFXTexture","testModelComp","quad","parent","scene","start","skybox","root","pipeline","pipelineSceneData","envmap","filter","active","setMipFilter","Filter","LINEAR","camera","readRegion","writeRegion","mipLevel","newEnvMap","pass","passes","handle","getHandle","setScale","device","capabilities","UVSpaceSignY","update","reset","mipmapLevel","m","window","resize","setUniform","blurriness","buffers","i","Uint8Array","setRotation","render","copyFramebufferToBuffer","framebuffer","buffer","copyBuffersToTexture"],"mappings":"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","sourcesContent":["import { _decorator, CameraComponent, Component, director, EffectAsset, gfx,\r\n    Material, ModelComponent, Node, primitives, Quat, RenderTexture, TextureCube, utils } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\nconst rotations = [\r\n    Quat.fromEuler(new Quat(),   0,  90, 0), // +X\r\n    Quat.fromEuler(new Quat(),   0, -90, 0), // -X\r\n    Quat.fromEuler(new Quat(),  90, 180, 0), // +Y\r\n    Quat.fromEuler(new Quat(), -90, 180, 0), // -Y\r\n    Quat.fromEuler(new Quat(),   0, 180, 0), // +Z\r\n    Quat.fromEuler(new Quat(),   0,   0, 0), // -Z\r\n];\r\n\r\nconst readRegions = [new gfx.BufferTextureCopy()];\r\nreadRegions[0].texExtent.depth = 1;\r\n\r\nconst writeRegions = [new gfx.BufferTextureCopy()];\r\nwriteRegions[0].texExtent.depth = 1;\r\nwriteRegions[0].texSubres.layerCount = 6; // 6 faces\r\n\r\nfunction getMipLevel (size: number) {\r\n    let level = 0;\r\n    while (size) { size >>= 1; level++; }\r\n    return level;\r\n}\r\n\r\nconst enableDebug = false;\r\n\r\n@ccclass('PreFilterEnvmap')\r\nexport class PreFilterEnvmap extends Component {\r\n\r\n    @property(EffectAsset)\r\n    public effect = null;\r\n\r\n    @property\r\n    public blurriness = 0;\r\n\r\n    private _camera: CameraComponent = null!;\r\n    private _material: Material = null!;\r\n    private _renderTarget: RenderTexture = null!;\r\n\r\n    public onLoad () {\r\n        this._camera = this.node.getComponentInChildren(CameraComponent)!;\r\n        this._renderTarget = this._camera.targetTexture!;\r\n        this._material = new Material();\r\n        this._material.initialize({\r\n            effectAsset: this.effect,\r\n            states: {\r\n                rasterizerState: { cullMode: gfx.CullMode.FRONT },\r\n                depthStencilState: { depthTest: false, depthWrite: false },\r\n            },\r\n        });\r\n        const modelComp = this.node.addComponent(ModelComponent);\r\n        modelComp.mesh = utils.createMesh(primitives.box({ width: 2, height: 2, length: 2 }));\r\n        modelComp.material = this._material;\r\n\r\n        if (enableDebug) {\r\n            const testNode = new Node();\r\n            const testMat = new Material();\r\n            testMat.initialize({ effectName: 'builtin-standard', defines: { USE_ALBEDO_MAP: true } });\r\n            testMat.setProperty('albedoMap', this._renderTarget.getGFXTexture());\r\n            const testModelComp = testNode.addComponent(ModelComponent);\r\n            testModelComp.mesh = utils.createMesh(primitives.quad());\r\n            testModelComp.material = testMat;\r\n            testNode.parent = this.node.scene as any;\r\n        }\r\n    }\r\n\r\n    public start () {\r\n        if (!enableDebug) {\r\n            const skybox = director.root!.pipeline.pipelineSceneData.skybox;\r\n            skybox.envmap = this.filter(skybox.envmap!);\r\n            // skybox.isRGBE = false;\r\n        }\r\n    }\r\n\r\n    // WebGL doesn't support using custom mipmap level in framebuffer attachments,\r\n    // so we'll have to do this the hard way (read back and upload again)\r\n    public filter (envmap: TextureCube) {\r\n        this.node.active = true;\r\n        envmap.setMipFilter(TextureCube.Filter.LINEAR);\r\n        let size = envmap.width; // has to be square\r\n        const camera = this._camera.camera;\r\n        const readRegion = readRegions[0];\r\n        const writeRegion = writeRegions[0];\r\n        const mipLevel = getMipLevel(size);\r\n        const newEnvMap = new TextureCube();\r\n        const pass = this._material.passes[0];\r\n        const handle = pass.getHandle('roughness');\r\n        this.node.setScale(1, director.root!.device.capabilities.UVSpaceSignY, 1); // GL-specific: flip both model and camera so front face stays the same\r\n        camera.scene!.update(0); // should update scene after flipping\r\n        newEnvMap.reset({ width: size, height: size, mipmapLevel: mipLevel });\r\n        for (let m = 0; m < mipLevel; m++) {\r\n            // need to resize both window and camera\r\n            camera.window!.resize(size, size);\r\n            camera.resize(size, size);\r\n            readRegion.texExtent.width = readRegion.texExtent.height = size;\r\n            writeRegion.texExtent.width = writeRegion.texExtent.height = size;\r\n            writeRegion.texSubres.mipLevel = m;\r\n            pass.setUniform(handle, this.blurriness + m / (mipLevel - 1) * (1 - this.blurriness));\r\n            pass.update();\r\n            const length = size * size * 4;\r\n            const buffers: Uint8Array[] = [];\r\n            for (let i = 0; i < 6; i++) {\r\n                buffers[i] = new Uint8Array(length);\r\n                this._camera.node.setRotation(rotations[i]);\r\n                this._camera.camera.update();\r\n                director.root!.pipeline.render([camera]);\r\n                director.root!.device.copyFramebufferToBuffer(camera.window!.framebuffer, buffers[i].buffer, readRegions);\r\n            }\r\n            director.root!.device.copyBuffersToTexture(buffers, newEnvMap.getGFXTexture()!, writeRegions);\r\n            size >>= 1;\r\n        }\r\n        this.node.active = false;\r\n        newEnvMap.setMipFilter(TextureCube.Filter.LINEAR);\r\n        return newEnvMap;\r\n    }\r\n}\r\n"]}