{"version":3,"sources":["file:///D:/material-examples/show-material/assets/scripts/tangent-visualizer.ts"],"names":["_decorator","Color","Component","Material","ModelComponent","utils","Vec3","GFXPrimitiveMode","GFXAttributeName","ccclass","property","executeInEditMode","requireComponent","v3_1","v3_2","TangentVisualizer","apply","val","refresh","start","_material","initialize","effectName","defines","USE_VERTEX_COLOR","states","primitive","LINE_LIST","target","comps","node","getComponents","length","console","warn","position","mesh","readAttribute","ATTR_POSITION","normal","ATTR_NORMAL","tangent","ATTR_TANGENT","bitangent","_generateBitangent","_updateModel","MAGENTA","CYAN","YELLOW","comp","pos","data","color","stride","material","createMesh","positions","Array","fill","map","_","i","ofs","Math","floor","fromArray","scaleAndAdd","scale","toArray","reduce","acc","cur","forEach","c","push","colors","WHITE","primitiveMode","minPos","Infinity","maxPos","slice","vCount","multiplyScalar","cross"],"mappings":"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","sourcesContent":["import { _decorator, Color, Component, Material, ModelComponent, utils, Vec3, GFXPrimitiveMode, GFXAttributeName } from 'cc';\r\nconst { ccclass, property, executeInEditMode, requireComponent } = _decorator;\r\n\r\nconst v3_1 = new Vec3();\r\nconst v3_2 = new Vec3();\r\n\r\n@ccclass('TangentVisualizer')\r\n@requireComponent(ModelComponent)\r\n@executeInEditMode\r\nexport class TangentVisualizer extends Component {\r\n\r\n    @property(ModelComponent)\r\n    public target = null;\r\n\r\n    @property\r\n    public scale = 0.1;\r\n\r\n    public _material = new Material();\r\n\r\n    @property\r\n    set apply (val) {\r\n        this.refresh();\r\n    }\r\n    get apply () {\r\n        return false;\r\n    }\r\n\r\n    public start () {\r\n        this._material.initialize({\r\n            effectName: 'builtin-unlit',\r\n            defines: { USE_VERTEX_COLOR: true },\r\n            states: { primitive: GFXPrimitiveMode.LINE_LIST },\r\n        });\r\n        this.refresh();\r\n    }\r\n\r\n    public refresh () {\r\n        if (!this.target) { return; }\r\n        const comps = this.node.getComponents(ModelComponent);\r\n        if (comps.length < 3) { console.warn('three model component on this node is needed'); return; }\r\n        const position: TypedArray = this.target.mesh.readAttribute(0, GFXAttributeName.ATTR_POSITION);\r\n        const normal: TypedArray = this.target.mesh.readAttribute(0, GFXAttributeName.ATTR_NORMAL);\r\n        const tangent: TypedArray = this.target.mesh.readAttribute(0, GFXAttributeName.ATTR_TANGENT);\r\n        const bitangent: TypedArray = this._generateBitangent(normal, tangent);\r\n        this._updateModel(comps[0], position, normal, Color.MAGENTA);\r\n        this._updateModel(comps[1], position, tangent, Color.CYAN, 4);\r\n        this._updateModel(comps[2], position, bitangent, Color.YELLOW);\r\n    }\r\n\r\n    public _updateModel (comp: ModelComponent, pos: TypedArray, data: TypedArray, color: Color, stride = 3) {\r\n        comp.material = this._material;\r\n        comp.mesh = utils.createMesh({\r\n            positions: Array(pos.length / 3 * 2).fill(0).map((_, i) => {\r\n                const ofs = Math.floor(i / 2);\r\n                Vec3.fromArray(v3_1, pos, ofs * 3);\r\n                if (i % 2) { Vec3.scaleAndAdd(v3_1, v3_1, Vec3.fromArray(v3_2, data, ofs * stride), this.scale); }\r\n                return Vec3.toArray([], v3_1);\r\n            }).reduce((acc, cur) => (cur.forEach((c) => acc.push(c)), acc), []),\r\n            colors: Array(pos.length / 3 * 2).fill(0).map((_, i) => {\r\n                return Color.toArray([], i % 2 ? color : Color.WHITE);\r\n            }).reduce((acc, cur) => (cur.forEach((c) => acc.push(c)), acc), []),\r\n            primitiveMode: GFXPrimitiveMode.LINE_LIST,\r\n            minPos: new Vec3(-Infinity, -Infinity, -Infinity),\r\n            maxPos: new Vec3( Infinity,  Infinity,  Infinity),\r\n        });\r\n    }\r\n\r\n    public _generateBitangent (normal: TypedArray, tangent: TypedArray) {\r\n        const bitangent = normal.slice();\r\n        const vCount = normal.length / 3;\r\n        for (let i = 0; i < vCount; i++) {\r\n            Vec3.fromArray(v3_1, normal, i * 3);\r\n            Vec3.fromArray(v3_2, tangent, i * 4);\r\n            Vec3.multiplyScalar(v3_1, Vec3.cross(v3_1, v3_1, v3_2), tangent[i * 4 + 3]);\r\n            Vec3.toArray(bitangent, v3_1, i * 3);\r\n        }\r\n        return bitangent;\r\n    }\r\n}\r\n"]}