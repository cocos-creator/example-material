{"version":3,"sources":["file:///D:/material-examples/show-material/assets/scripts/ad-hoc/instanced-skinning.ts"],"names":["_decorator","Component","instantiate","Node","Prefab","SkeletalAnimationComponent","Texture2D","director","gfx","UnlitQuadComponent","ccclass","property","InstancedSkinning","groupCount","val","_groupCount","_updateGroups","start","root","device","hasFeature","Feature","INSTANCED_ARRAYS","Math","min","warningSign","active","_baselineNode","_initGroup","baseline","baselineVisible","toggleBaselineGroup","e","isChecked","toggleAnimNames","i","_nameLabels","length","setGroups","floor","progress","maxGroupCount","_testNodes","push","testgroup","name","prefab","posZ","len","labelImages","group","parent","node","scene","posX","groupPerColumn","inst","setPosition","label","getChildByName","getComponent","texture","animComp","clipName","clips","play"],"mappings":"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","sourcesContent":["import { _decorator, Component, instantiate, Node, Prefab, SkeletalAnimationComponent,\r\n    SliderComponent, Texture2D, ToggleComponent, director, gfx } from 'cc';\r\nimport { UnlitQuadComponent } from '../unlit-quad';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('InstancedSkinning')\r\nexport class InstancedSkinning extends Component {\r\n\r\n    @property(Prefab)\r\n    public baseline = null;\r\n\r\n    @property(Prefab)\r\n    public testgroup = null;\r\n\r\n    @property([Texture2D])\r\n    public labelImages: Texture2D[] = [];\r\n\r\n    @property\r\n    public maxGroupCount = 10;\r\n\r\n    @property\r\n    public baselineVisible = true;\r\n\r\n    @property\r\n    private _groupCount = 1;\r\n\r\n    @property\r\n    public groupPerColumn = 100;\r\n\r\n    @property\r\n    set groupCount (val) {\r\n        this._groupCount = val;\r\n        this._updateGroups();\r\n    }\r\n    get groupCount () {\r\n        return this._groupCount;\r\n    }\r\n\r\n    @property(Node)\r\n    warningSign: Node | null = null;\r\n\r\n    private _baselineNode: Node | null = null;\r\n    private _testNodes: Node[] = [];\r\n    private _nameLabels: Node[] = [];\r\n\r\n    public start () {\r\n        // clamp the initial count if instancing is not supported\r\n        if (!director.root!.device.hasFeature(gfx.Feature.INSTANCED_ARRAYS)) {\r\n            this._groupCount = Math.min(this._groupCount, 1);\r\n            if (this.warningSign) { this.warningSign.active = true; }\r\n        }\r\n\r\n        this._baselineNode = this._initGroup('Baseline', this.baseline!, 0);\r\n        this._updateGroups();\r\n        this._baselineNode.active = this.baselineVisible;\r\n    }\r\n\r\n    public toggleBaselineGroup (e: ToggleComponent) {\r\n        this._baselineNode!.active = e.isChecked;\r\n    }\r\n\r\n    public toggleAnimNames (e: ToggleComponent) {\r\n        for (let i = 0; i < this._nameLabels.length; i++) {\r\n            this._nameLabels[i].active = e.isChecked;\r\n        }\r\n    }\r\n\r\n    public setGroups (e: SliderComponent) {\r\n        this.groupCount = Math.floor(e.progress * this.maxGroupCount);\r\n    }\r\n\r\n    private _updateGroups () {\r\n        for (let i = 0; i < this._groupCount; i++) {\r\n            if (this._testNodes[i]) { this._testNodes[i].active = true; }\r\n            else { this._testNodes.push(this._initGroup('TestGroup', this.testgroup!, 5 * (i + 1))); }\r\n        }\r\n        for (let i = this._groupCount; i < this._testNodes.length; i++) {\r\n            this._testNodes[i].active = false;\r\n        }\r\n    }\r\n\r\n    private _initGroup (name: string, prefab: Prefab, posZ: number) {\r\n        const len = this.labelImages.length;\r\n        const group = new Node(name);\r\n        group.parent = this.node.scene as unknown as Node;\r\n        for (let i = 0; i < len; i++) {\r\n            const posX = Math.floor(posZ / this.groupPerColumn) * 30 + i * 3;\r\n            const inst = instantiate(prefab) as Node; inst.setPosition(posX, 0, posZ % this.groupPerColumn); inst.parent = group;\r\n            const label = inst.getChildByName('Label')!.getComponent(UnlitQuadComponent)!;\r\n            label.texture = this.labelImages[i]; this._nameLabels.push(label!.node);\r\n            const animComp = inst.getChildByName('Model')!.getComponent(SkeletalAnimationComponent)!;\r\n            const clipName = inst.name = animComp.clips[i]!.name;\r\n            animComp.play(clipName);\r\n        }\r\n        return group;\r\n    }\r\n}\r\n"]}