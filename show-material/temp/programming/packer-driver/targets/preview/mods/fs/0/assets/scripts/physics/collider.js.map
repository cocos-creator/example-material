{"version":3,"sources":["file:///D:/material-examples/show-material/assets/scripts/physics/collider.ts"],"names":["_decorator","Component","ModelComponent","RigidBodyComponent","Vec3","Vec4","ccclass","v3_1","static_color","Collider","start","_body","node","getComponent","mat","material","_initialColor","getProperty","_pass","passes","_handle","getHandle","update","getLinearVelocity","speed","length","lerp","_color","setUniform"],"mappings":";;;;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,c,OAAAA,c;AAAgBC,MAAAA,kB,OAAAA,kB;AAAoBC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,I,OAAAA,I;;;;;;;AAClEC,MAAAA,O,GAAYN,U,CAAZM,O;AAEFC,MAAAA,I,GAAO,IAAIH,IAAJ,E;AACPI,MAAAA,Y,GAAe,IAAIH,IAAJ,CAAS,GAAT,EAAc,GAAd,EAAmB,GAAnB,EAAwB,GAAxB,C;;0BAGRI,Q,WADZH,OAAO,CAAC,UAAD,C;;;;;;;;;;;;kEAGY,I;;0EACQ,I;;kEACR,I;;oEACE,C;;mEAED,IAAID,IAAJ,E;;;;;;;eAEVK,K,GAAP,iBAAgB;AACZ,eAAKC,KAAL,GAAa,KAAKC,IAAL,CAAUC,YAAV,CAAuBV,kBAAvB,CAAb;AACA,cAAMW,GAAG,GAAG,KAAKF,IAAL,CAAUC,YAAV,CAAuBX,cAAvB,EAAuCa,QAAnD,CAFY,CAGZ;;AACA,eAAKC,aAAL,GAAqB,IAAIX,IAAJ,CAASS,GAAG,CAACG,WAAJ,CAAgB,WAAhB,CAAT,CAArB;AACA,eAAKC,KAAL,GAAaJ,GAAG,CAACK,MAAJ,CAAW,CAAX,CAAb;AACA,eAAKC,OAAL,GAAe,KAAKF,KAAL,CAAWG,SAAX,CAAqB,WAArB,CAAf;AACH,S;;eAEMC,M,GAAP,kBAAiB;AACb;AACA,eAAKX,KAAL,CAAWY,iBAAX,CAA6BhB,IAA7B;;AACA,cAAIiB,KAAK,GAAGjB,IAAI,CAACkB,MAAL,EAAZ;AAA2BD,UAAAA,KAAK,IAAIA,KAAK,GAAG,CAAjB;AAC3BnB,UAAAA,IAAI,CAACqB,IAAL,CAAU,KAAKC,MAAf,EAAuBnB,YAAvB,EAAqC,KAAKQ,aAA1C,EAAyDQ,KAAzD;;AACA,eAAKN,KAAL,CAAWU,UAAX,CAAsB,KAAKR,OAA3B,EAAoC,KAAKO,MAAzC;AACH,S;;;QAxByB1B,S","sourcesContent":["\r\nimport { _decorator, Component, ModelComponent, RigidBodyComponent, Vec3, Vec4 } from 'cc';\r\nconst { ccclass } = _decorator;\r\n\r\nconst v3_1 = new Vec3();\r\nconst static_color = new Vec4(0.3, 0.3, 0.3, 1.0);\r\n\r\n@ccclass('Collider')\r\nexport class Collider extends Component {\r\n\r\n    private _body = null;\r\n    private _initialColor = null;\r\n    private _pass = null;\r\n    private _handle = 0;\r\n\r\n    private _color = new Vec4();\r\n\r\n    public start () {\r\n        this._body = this.node.getComponent(RigidBodyComponent);\r\n        const mat = this.node.getComponent(ModelComponent).material;\r\n        // Vec4 and Color are compatible with each other, but Vec4 is more efficient when updated frequently\r\n        this._initialColor = new Vec4(mat.getProperty('mainColor') as Vec4);\r\n        this._pass = mat.passes[0];\r\n        this._handle = this._pass.getHandle('mainColor');\r\n    }\r\n\r\n    public update () {\r\n        // visualize speed\r\n        this._body.getLinearVelocity(v3_1);\r\n        let speed = v3_1.length(); speed /= speed + 1;\r\n        Vec4.lerp(this._color, static_color, this._initialColor, speed);\r\n        this._pass.setUniform(this._handle, this._color);\r\n    }\r\n}\r\n"]}