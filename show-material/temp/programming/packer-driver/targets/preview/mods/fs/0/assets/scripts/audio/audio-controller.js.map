{"version":3,"sources":["file:///D:/material-examples/show-material/assets/scripts/audio/audio-controller.ts"],"names":["_decorator","AudioSourceComponent","Component","LabelComponent","SliderComponent","ToggleComponent","ccclass","property","AudioController","start","volume","node","getChildByName","getComponent","currentTime","volumeLabel","currentTimeLabel","loop","playOnAwake","playing","string","source","name","loadMode","clip","cc","AudioClip","AudioType","WEB_AUDIO","DOM_AUDIO","JSB_AUDIO","update","progress","duration","toFixed","isChecked","play","pause","stop","setVolume","e","setCurrentTime","setLoop","setPlayOnAwake"],"mappings":"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","sourcesContent":["import { _decorator, AudioSourceComponent, Component, LabelComponent, SliderComponent, ToggleComponent } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('AudioController')\r\nexport class AudioController extends Component {\r\n\r\n    @property(AudioSourceComponent)\r\n    public source = null;\r\n\r\n    public volume = null;\r\n    public currentTime = null;\r\n    public volumeLabel = null;\r\n    public currentTimeLabel = null;\r\n    public loop = null;\r\n    public playOnAwake = null;\r\n    public playing = null;\r\n\r\n    public start () {\r\n        this.volume = this.node.getChildByName('volume').getComponent(SliderComponent);\r\n        this.currentTime = this.node.getChildByName('currentTime').getComponent(SliderComponent);\r\n        this.volumeLabel = this.volume.node.getChildByName('Numbers').getComponent(LabelComponent);\r\n        this.currentTimeLabel = this.currentTime.node.getChildByName('Numbers').getComponent(LabelComponent);\r\n        this.loop = this.node.getChildByName('loop').getComponent(ToggleComponent);\r\n        this.playOnAwake = this.node.getChildByName('playOnAwake').getComponent(ToggleComponent);\r\n        this.playing = this.node.getChildByName('playing').getComponent(ToggleComponent);\r\n\r\n        this.node.getChildByName('name').getComponent(LabelComponent).string = this.source.node.name;\r\n\r\n        let loadMode = 'Unknown Load Mode';\r\n        switch (this.source.clip.loadMode) {\r\n        case cc.AudioClip.AudioType.WEB_AUDIO:\r\n            loadMode = 'Web Audio API Mode';\r\n            break;\r\n        case cc.AudioClip.AudioType.DOM_AUDIO:\r\n            loadMode = 'DOM Audio Mode';\r\n            break;\r\n        case cc.AudioClip.AudioType.JSB_AUDIO:\r\n            loadMode = 'JSB Audio Mode';\r\n            break;\r\n        }\r\n        this.node.getChildByName('loadMode').getComponent(LabelComponent).string = loadMode;\r\n    }\r\n\r\n    public update () {\r\n        this.volume.progress = this.source.volume;\r\n        this.currentTime.progress = this.source.currentTime / this.source.duration;\r\n        this.volumeLabel.string = `${this.source.volume.toFixed(2)} / 1`;\r\n        this.currentTimeLabel.string = `${this.source.currentTime.toFixed(1)} / ${this.source.duration.toFixed(1)}`;\r\n\r\n        this.loop.isChecked = this.source.loop;\r\n        this.playOnAwake.isChecked = this.source.playOnAwake;\r\n        this.playing.isChecked = this.source.playing;\r\n    }\r\n\r\n    public play () {\r\n        this.source.play();\r\n    }\r\n\r\n    public pause () {\r\n        this.source.pause();\r\n    }\r\n\r\n    public stop () {\r\n        this.source.stop();\r\n    }\r\n\r\n    // slider callback\r\n    public setVolume (e: SliderComponent) {\r\n        this.source.volume = e.progress;\r\n    }\r\n    // slider callback\r\n    public setCurrentTime (e: SliderComponent) {\r\n        this.source.currentTime = e.progress * this.source.duration;\r\n    }\r\n\r\n    // toggle callback\r\n    public setLoop (e: ToggleComponent) {\r\n        this.source.loop = e.isChecked;\r\n    }\r\n    // toggle callback\r\n    public setPlayOnAwake (e: ToggleComponent) {\r\n        this.source.playOnAwake = e.isChecked;\r\n    }\r\n}\r\n"]}