{"version":3,"sources":["file:///D:/material-examples/show-material/assets/scripts/collision-detection/emitter.ts"],"names":["Element","_decorator","Color","Component","EffectAsset","Material","ModelComponent","Node","SphereColliderComponent","Vec3","utils","primitives","math","ccclass","property","outOfBounds","v","border","Math","abs","x","y","z","v3_1","Emitter","start","hintMesh","createMesh","capsule","sphereMesh","sphere","hint","hintModel","addComponent","hintMat","initialize","effectName","setProperty","color","material","mesh","parent","node","i","poolSize","info","set","model","mat","technique","pass","passes","hColor","getHandle","setUniform","col","radius","isTrigger","setGroup","group","setMask","mask","on","e","collider","selfCollider","ele","getComponent","collided","a","framesRemaining","velocity","active","_deadpool","push","update","_livepool","length","reap","add","position","setPosition","resurrect","splice","indexOf","reapAll","pop","theta","toRadian","randomRange","leftAngle","rightAngle","phi","speed","cos","sin"],"mappings":"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","sourcesContent":["import { _decorator, Color, Component, EffectAsset, Material, ModelComponent, Node,\r\n  SphereColliderComponent, Vec3, utils, primitives, Mesh, math, ITriggerEvent } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\nlet hintMesh: Mesh;\r\nlet sphereMesh: Mesh;\r\nconst outOfBounds = (v: Vec3, border = 20) => Math.abs(v.x) > border || Math.abs(v.y) > border || Math.abs(v.z) > border;\r\n\r\nconst v3_1 = new Vec3();\r\n\r\nclass Element extends Component {\r\n    public velocity = new Vec3();\r\n    public color = new Color();\r\n    public collided = false;\r\n    public framesRemaining = 0;\r\n    public pass = null;\r\n    public hColor = 0;\r\n}\r\n\r\n// encapsulate an interesting emitter, emitted particles will\r\n// annihilate after collision, if satisfying filter condition\r\n@ccclass('Emitter')\r\nexport class Emitter extends Component {\r\n\r\n    @property\r\n    public poolSize = 50;\r\n\r\n    @property\r\n    public group = 0;\r\n\r\n    @property\r\n    public mask = 0;\r\n\r\n    @property\r\n    public leftAngle = 0;\r\n\r\n    @property\r\n    public rightAngle = 0;\r\n\r\n    @property\r\n    public color = new Color();\r\n\r\n    @property(EffectAsset)\r\n    public effectAsset = null;\r\n\r\n    public _deadpool: Element[] = [];\r\n    public _livepool: Element[] = [];\r\n\r\n    // generate everything procedurally\r\n    public start () {\r\n      if (!hintMesh) {\r\n        hintMesh = utils.createMesh(primitives.capsule(1));\r\n        sphereMesh = utils.createMesh(primitives.sphere(1));\r\n      }\r\n      // emitter hint\r\n      const hint = new Node();\r\n      const hintModel = hint.addComponent(ModelComponent);\r\n      const hintMat = new Material();\r\n      hintMat.initialize({ effectName: 'builtin-standard' });\r\n      hintMat.setProperty('albedo', this.color);\r\n      hintMat.setProperty('metallic', 0.1);\r\n      hintModel.material = hintMat;\r\n      hintModel.mesh = hintMesh;\r\n      hint.parent = this.node;\r\n      // elements\r\n      for (let i = 0; i < this.poolSize; i++) {\r\n        const node = new Node();\r\n        node.parent = this.node;\r\n        // element info\r\n        const info = node.addComponent(Element);\r\n        info.color.set(this.color);\r\n        // model\r\n        const model = node.addComponent(ModelComponent);\r\n        const mat = new Material();\r\n        mat.initialize({\r\n            effectName: 'builtin-standard',\r\n            technique: 1, // transparent\r\n        });\r\n        mat.setProperty('metallic', 0.1);\r\n        info.pass = mat.passes[0];\r\n        info.hColor = info.pass.getHandle('albedo');\r\n        info.pass.setUniform(info.hColor, info.color);\r\n        model.material = mat;\r\n        model.mesh = sphereMesh;\r\n        // collider\r\n        const col = node.addComponent(SphereColliderComponent);\r\n        col.radius = 1;\r\n        col.isTrigger = true;\r\n        col.setGroup(this.group); col.setMask(this.mask);\r\n        col.on('onTriggerEnter', (e: ITriggerEvent) => {\r\n          const collider = e.selfCollider;\r\n          const ele = collider.node.getComponent(Element);\r\n          if (ele.collided) { return; }\r\n          ele.color.a = 255;\r\n          ele.pass.setUniform(ele.hColor, ele.color);\r\n          ele.collided = true;\r\n          ele.framesRemaining = 5;\r\n          Vec3.set(ele.velocity, 0, 0, 0);\r\n          collider.setGroup(0); collider.setMask(0);\r\n        });\r\n        // store\r\n        node.active = false;\r\n        this._deadpool.push(info);\r\n      }\r\n    }\r\n\r\n    public update () {\r\n      for (let i = 0; i < this._livepool.length; i++) {\r\n        const ele = this._livepool[i];\r\n        if (ele.collided) {\r\n          if (ele.framesRemaining-- <= 0) { this.reap(ele); }\r\n        } else {\r\n          Vec3.add(v3_1, ele.node.position, ele.velocity);\r\n          ele.node.setPosition(v3_1);\r\n          if (outOfBounds(v3_1)) { this.reap(ele); }\r\n        }\r\n      }\r\n      if (this._deadpool.length > 0) { this.resurrect(); }\r\n      // for (let i = 0; i < this._deadpool.length; i++) this.resurrect();\r\n    }\r\n\r\n    public reap (ele: Element) {\r\n      ele.node.active = false;\r\n      this._livepool.splice(this._livepool.indexOf(ele), 1);\r\n      this._deadpool.push(ele);\r\n    }\r\n\r\n    public reapAll () {\r\n      for (let i = 0; i < this._livepool.length; i++) {\r\n        const ele = this._livepool[i];\r\n        ele.node.active = false;\r\n        this._deadpool.push(ele);\r\n      }\r\n      this._livepool.length = 0;\r\n    }\r\n\r\n    public resurrect () {\r\n      const ele = this._deadpool.pop();\r\n      const theta = math.toRadian(math.randomRange(this.leftAngle, this.rightAngle));\r\n      const phi = math.randomRange(1, 2);\r\n      const speed = math.randomRange(0.1, 0.3);\r\n      Vec3.set(ele.velocity, Math.cos(theta) * Math.sin(phi) * speed,\r\n        Math.cos(phi) * speed, Math.sin(theta) * Math.sin(phi) * speed);\r\n      ele.color.a = this.color.a; ele.collided = false;\r\n      ele.pass.setUniform(ele.hColor, ele.color);\r\n      const col = ele.node.getComponent(SphereColliderComponent);\r\n      col.setGroup(this.group); col.setMask(this.mask);\r\n      ele.node.setPosition(0, 0, 0);\r\n      this._livepool.push(ele);\r\n      ele.node.active = true;\r\n    }\r\n}\r\n"]}