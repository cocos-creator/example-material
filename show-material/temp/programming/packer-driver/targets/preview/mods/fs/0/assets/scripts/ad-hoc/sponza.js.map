{"version":3,"sources":["file:///D:/material-examples/show-material/assets/scripts/ad-hoc/sponza.ts"],"names":["_decorator","CameraComponent","Color","Component","director","ccclass","property","Sponza","start","ambient","root","pipeline","halfLoopTime","loopTime","camera","node","getComponent","update","deltaTime","illum","t","getTotalFrames","Math","sin","PI","skyIllum","maxIllum","color","r","g","b","clearColor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,e,OAAAA,e;AAAiBC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,Q,OAAAA,Q;;;;;;;AAChDC,MAAAA,O,GAAsBL,U,CAAtBK,O;AAASC,MAAAA,Q,GAAaN,U,CAAbM,Q;;wBAGJC,M,WADZF,OAAO,CAAC,QAAD,C;;;;;;;;;;;;;;;;;;yEAUmB,C;;;;kEAEP,IAAIH,KAAJ,E;;;;;;;eAETM,K,GAAP,iBAAgB;AACZ,eAAKC,OAAL,GAAeL,QAAQ,CAACM,IAAT,CAAcC,QAAd,CAAuBF,OAAtC;AACA,eAAKG,YAAL,GAAoB,KAAKC,QAAL,GAAgB,GAApC;AACA,eAAKC,MAAL,GAAc,KAAKC,IAAL,CAAUC,YAAV,CAAuBf,eAAvB,CAAd;AACH,S;;eAEMgB,M,GAAP,gBAAeC,SAAf,EAAkC;AAC9B,cAAIC,KAAK,GAAG,CAAZ;AACA,cAAMC,CAAC,GAAGhB,QAAQ,CAACiB,cAAT,KAA4B,KAAKR,QAA3C;;AACA,cAAIO,CAAC,GAAG,KAAKR,YAAb,EAA2B;AAAEO,YAAAA,KAAK,GAAGG,IAAI,CAACC,GAAL,CAAS,CAACH,CAAC,GAAG,KAAKR,YAAV,IAA0B,KAAKA,YAA/B,GAA8CU,IAAI,CAACE,EAA5D,CAAR;AAA0E;;AACvG,eAAKf,OAAL,CAAagB,QAAb,GAAwBN,KAAK,GAAG,KAAKO,QAArC;AACA,eAAKC,KAAL,CAAWC,CAAX,GAAe,KAAKD,KAAL,CAAWE,CAAX,GAAe,KAAKF,KAAL,CAAWG,CAAX,GAAeX,KAAK,GAAG,GAArD;AACA,eAAKL,MAAL,CAAYiB,UAAZ,GAAyB,KAAKJ,KAA9B;AACH,S;;;QA1BuBxB,S,oFAEvBG,Q;;;;;iBACiB,I;;mFAEjBA,Q;;;;;iBACiB,K","sourcesContent":["import { _decorator, CameraComponent, Color, Component, director } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Sponza')\r\nexport class Sponza extends Component {\r\n\r\n    @property\r\n    public loopTime = 3600;\r\n\r\n    @property\r\n    public maxIllum = 20000;\r\n\r\n    private ambient: any;\r\n    private halfLoopTime = 0;\r\n    private camera: CameraComponent;\r\n    private color = new Color();\r\n\r\n    public start () {\r\n        this.ambient = director.root.pipeline.ambient;\r\n        this.halfLoopTime = this.loopTime * 0.5;\r\n        this.camera = this.node.getComponent(CameraComponent);\r\n    }\r\n\r\n    public update (deltaTime: number) {\r\n        let illum = 0;\r\n        const t = director.getTotalFrames() % this.loopTime;\r\n        if (t > this.halfLoopTime) { illum = Math.sin((t - this.halfLoopTime) / this.halfLoopTime * Math.PI); }\r\n        this.ambient.skyIllum = illum * this.maxIllum;\r\n        this.color.r = this.color.g = this.color.b = illum * 255;\r\n        this.camera.clearColor = this.color;\r\n    }\r\n}\r\n"]}